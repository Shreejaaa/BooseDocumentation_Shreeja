{
  "api/ASE_Shreeja_Neupane.AppArray.html": {
    "href": "api/ASE_Shreeja_Neupane.AppArray.html",
    "title": "Class AppArray | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppArray Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll array class that inherits from the BOOSE.Array class. public class AppArray : Array, ICommand Inheritance object Command Evaluation Array AppArray Implements ICommand Inherited Members Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.Compile() Array.CheckParameters(string[]) Array.Execute() Array.ProcessArrayParametersCompile(bool) Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Initializes a new instance of the AppArray class. Calls the base class constructor and reduces the restriction counter. public AppArray()"
  },
  "api/ASE_Shreeja_Neupane.AppCall.html": {
    "href": "api/ASE_Shreeja_Neupane.AppCall.html",
    "title": "Class AppCall | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppCall Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll AppCall that inherits from the Call class. public class AppCall : Call, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Call AppCall Implements ICommand Inherited Members Call.methodName Call.Compile() Call.Execute() CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCall() Initializes a new instance of the AppCall class and reduces any restrictions. public AppCall() Methods Restrictions() Implements the Restrictions method by overriding the base class version. Currently does not apply any additional restrictions. public override void Restrictions()"
  },
  "api/ASE_Shreeja_Neupane.AppCanvas.html": {
    "href": "api/ASE_Shreeja_Neupane.AppCanvas.html",
    "title": "Class AppCanvas | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppCanvas Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll The AppCanvas class implements the ICanvas interface public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCanvas() AppCanvas constructor that initializes the canvas to the default size. public AppCanvas() Fields XcanvasSize public int XcanvasSize Field Value int YcanvasSize public int YcanvasSize Field Value int Properties PenColour Gets and sets the pen color. public object PenColour { get; set; } Property Value object Xpos Gets and sets the X position of the pen. If it exceeds the boundary, an exception message is thrown. public int Xpos { get; set; } Property Value int Ypos Gets and sets the Y position of the pen. If it exceeds the boundary, an exception message is thrown. public int Ypos { get; set; } Property Value int Methods Circle(int, bool) Draws a circle of the given radius at the current pen position and throws an exception if the radius is negative or invalid. public void Circle(int radius, bool filled) Parameters radius int filled bool Clear() public void Clear() DrawTo(int, int) Draws a line to the given X and Y coordinates and throws a CanvasException if the coordinates are invalid. public void DrawTo(int toX, int toY) Parameters toX int toY int Exceptions CanvasException MoveTo(int, int) Moves the pen to the given X and Y positions without drawing anything and throws an exception if the coordinates are out of bounds or invalid. public void MoveTo(int x, int y) Parameters x int y int Exceptions CanvasException Rect(int, int, bool) Draws a rectangle with the given width and height. Throws an exception if the parameters are negative or invalid. public void Rect(int width, int height, bool filled) Parameters width int height int filled bool Exceptions CanvasException Reset() Resets the pen position to 0. public void Reset() Set(int, int) Sets the X and Y position of the pen. public void Set(int xsize, int ysize) Parameters xsize int ysize int SetColour(int, int, int) Sets the pen color to the given RGB values and throws an exception if the values are invalid. public void SetColour(int red, int green, int blue) Parameters red int green int blue int Exceptions CanvasException Tri(int, int) Draws a triangle with the given width and height. public void Tri(int width, int height) Parameters width int height int Exceptions CanvasException WriteExceptionMessage(string) Styles the exception message displayed in the picture box. public void WriteExceptionMessage(string message) Parameters message string WriteText(string) Writes a string on the picture box and throws an exception if the parameter is null. public void WriteText(string text) Parameters text string Exceptions CanvasException getBitmap() public object getBitmap() Returns object"
  },
  "api/ASE_Shreeja_Neupane.AppCircle.html": {
    "href": "api/ASE_Shreeja_Neupane.AppCircle.html",
    "title": "Class AppCircle | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppCircle Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll The AppCircle class represents a command for drawing a circle with an optional filled state. public class AppCircle : Circle, ICommand Inheritance object Command CanvasCommand CommandOneParameter Circle AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCircle() Default constructor that initializes the circle with the default 'not filled' state. public AppCircle() AppCircle(Canvas, int, bool) Initializes a new circle with the specified canvas, radius, and optional filled state. public AppCircle(Canvas c, int radius, bool filled = false) Parameters c Canvas Canvas on which the circle will be drawn. radius int Radius of the circle to be drawn. filled bool Indicates whether the circle should be filled. Defaults to 'false'. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters passed to the circle command. Exceptions CommandException Thrown when the number of parameters is incorrect or the 'filled' parameter is invalid. Execute() Executes the drawing of the circle on the canvas with the specified radius and filled state. public override void Execute()"
  },
  "api/ASE_Shreeja_Neupane.AppClear.html": {
    "href": "api/ASE_Shreeja_Neupane.AppClear.html",
    "title": "Class AppClear | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppClear Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll The AppClear class is responsible for clearing the canvas. It inherits from CanvasCommand. public class AppClear : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppClear Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppClear(ICanvas) Constructor for the AppClear class. public AppClear(ICanvas c) Parameters c ICanvas Methods CheckParameters(string[]) This method checks the parameters passed to the command. public override void CheckParameters(string[] parameter) Parameters parameter string[] Execute() This method clears the canvas by calling the Clear() method of the base Canvas. public override void Execute()"
  },
  "api/ASE_Shreeja_Neupane.AppCommandFactory.html": {
    "href": "api/ASE_Shreeja_Neupane.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppCommandFactory Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll AppCommandFactory inherits the CommandFactory class and overrides the MakeCommand method to handle custom commands. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MakeCommand(string) Overrides the MakeCommand method to create specific commands based on the provided command type. public override ICommand MakeCommand(string commandType) Parameters commandType string The type of command to create Returns ICommand An ICommand instance corresponding to the command type"
  },
  "api/ASE_Shreeja_Neupane.AppElse.html": {
    "href": "api/ASE_Shreeja_Neupane.AppElse.html",
    "title": "Class AppElse | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppElse Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll Else block that inherits from the Else class. public class AppElse : Else, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Else AppElse Implements ICommand Inherited Members Else.CheckParameters(string[]) Else.Compile() Else.Execute() Else.CorrespondingEnd CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class and reduces any restrictions associated with it. public AppElse() Methods Restrictions() Implements the Restrictions method by overriding the base class version. Currently does not apply any additional restrictions. public override void Restrictions()"
  },
  "api/ASE_Shreeja_Neupane.AppEnd.html": {
    "href": "api/ASE_Shreeja_Neupane.AppEnd.html",
    "title": "Class AppEnd | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppEnd Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll end block that inherits from the End class. public class AppEnd : End, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand End AppEnd Implements ICommand Inherited Members End.Compile() End.Execute() CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Initializes a new instance of the AppEnd class and reduces any restrictions associated with it. public AppEnd() Methods Restrictions() Implements the Restrictions method by overriding the base class version. Currently does not apply any additional restrictions. public override void Restrictions()"
  },
  "api/ASE_Shreeja_Neupane.AppFor.html": {
    "href": "api/ASE_Shreeja_Neupane.AppFor.html",
    "title": "Class AppFor | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppFor Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll BOOSE.For class that inherits from the BOOSE.For class. public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.Execute() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppFor() Initializes a new instance of the AppFor class. The constructor currently does not perform any additional operations. public AppFor() Methods Restrictions() public override void Restrictions()"
  },
  "api/ASE_Shreeja_Neupane.AppIf.html": {
    "href": "api/ASE_Shreeja_Neupane.AppIf.html",
    "title": "Class AppIf | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppIf Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll BOOSE.If class that inherits from the BOOSE.If class. public class AppIf : If, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand If AppIf Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Initializes a new instance of the AppIf class. Calls the ReduceRestrictions method to reduce restrictions during initialization. public AppIf() Methods Restrictions() public override void Restrictions()"
  },
  "api/ASE_Shreeja_Neupane.AppInt.html": {
    "href": "api/ASE_Shreeja_Neupane.AppInt.html",
    "title": "Class AppInt | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppInt Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll class that inherits from the BOOSE.Int class. Adds custom restrictions for variable count and overrides key methods. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppInt() Initializes a new instance of the AppInt class. Calls the Restrictions() method during initialization. public AppInt() Methods Compile() Compiles the current instance by calling the base class's Compile() method. public override void Compile() Execute() Executes the current instance by calling the base class's Execute() method. public override void Execute() Restrictions() Restricts the number of variables to be no more than 100. Throws a BOOSE.RestrictionException if the count exceeds 100. public override void Restrictions()"
  },
  "api/ASE_Shreeja_Neupane.AppMethod.html": {
    "href": "api/ASE_Shreeja_Neupane.AppMethod.html",
    "title": "Class AppMethod | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppMethod Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll method that inherits from the Method class. public class AppMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method AppMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppMethod() Initializes a new instance of the AppMethod class and reduces any restrictions associated with it. public AppMethod() Methods Restrictions() Implements the Restrictions method by overriding the base class version. Currently does not apply any additional restrictions. public override void Restrictions()"
  },
  "api/ASE_Shreeja_Neupane.AppParser.html": {
    "href": "api/ASE_Shreeja_Neupane.AppParser.html",
    "title": "Class AppParser | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppParser Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll program that inherits from the BOOSE.Parser class. public class AppParser : Parser, IParser Inheritance object Parser AppParser Implements IParser Inherited Members Parser.ParseCommand(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppParser(CommandFactory, StoredProgram) Initializes a new instance of the AppParser class with the specified command factory and stored program. public AppParser(CommandFactory Factory, StoredProgram Program) Parameters Factory CommandFactory The command factory used to create commands. Program StoredProgram The stored program to which the parsed commands will be added. Methods ParseProgram(string) Parses the given program and performs syntax checks. Adds an \"endofprogram\" variable and processes each line of the program. public override void ParseProgram(string program) Parameters program string The source code of the program to be parsed. Exceptions ParserException Thrown if there are syntax errors during parsing."
  },
  "api/ASE_Shreeja_Neupane.AppReal.html": {
    "href": "api/ASE_Shreeja_Neupane.AppReal.html",
    "title": "Class AppReal | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppReal Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll class that inherits from the BOOSE.Real class. Adds custom restrictions for variable count and overrides key methods. public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppReal() Initializes a new instance of the AppReal class. Calls the Restrictions() method during initialization. public AppReal() Methods Compile() Compiles the current instance by calling the base class's Compile() method. public override void Compile() Execute() Executes the current instance by calling the base class's Execute() method. public override void Execute() Restrictions() Restricts the number of variables to be no more than 100. Throws a BOOSE.RestrictionException if the count exceeds 100. public override void Restrictions()"
  },
  "api/ASE_Shreeja_Neupane.AppRectangle.html": {
    "href": "api/ASE_Shreeja_Neupane.AppRectangle.html",
    "title": "Class AppRectangle | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppRectangle Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll The AppRectangle class represents a command for drawing a rectangle with optional filling on a canvas. public class AppRectangle : Rect, ICommand Inheritance object Command CanvasCommand CommandOneParameter Rect AppRectangle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppRectangle() Default constructor that initializes the rectangle. By default, the rectangle will not be filled. public AppRectangle() AppRectangle(Canvas, int, int, bool) Initializes a new rectangle with the specified canvas, width, height, and optional filled state. public AppRectangle(Canvas c, int width, int height, bool filled = false) Parameters c Canvas Canvas where the rectangle is drawn. width int The width of the rectangle. height int The height of the rectangle. filled bool Indicates whether the rectangle should be filled. Default is 'false'. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters provided by the user. Exceptions CommandException Thrown if the number of parameters is invalid or if the 'filled' parameter is invalid. Execute() Executes the drawing of the rectangle on the canvas with the specified width, height, and filled state. public override void Execute()"
  },
  "api/ASE_Shreeja_Neupane.AppReset.html": {
    "href": "api/ASE_Shreeja_Neupane.AppReset.html",
    "title": "Class AppReset | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppReset Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll command to reset the canvas in the application. Inherits from BOOSE.CanvasCommand and overrides the Execute method to reset the canvas. public class AppReset : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppReset Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppReset(AppCanvas) Initializes a new instance of the AppReset class with the specified canvas. public AppReset(AppCanvas canvas) Parameters canvas AppCanvas The canvas to be reset. Methods CheckParameters(string[]) Checks the parameters passed to the command. Currently not implemented. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of parameters to be checked for the command. Execute() Executes the reset command, resetting the associated canvas. public override void Execute()"
  },
  "api/ASE_Shreeja_Neupane.AppStoredProgram.html": {
    "href": "api/ASE_Shreeja_Neupane.AppStoredProgram.html",
    "title": "Class AppStoredProgram | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppStoredProgram Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll Represents a custom BOOSE.StoredProgram class that inherits from the BOOSE.StoredProgram class. Provides custom execution logic with limits on execution cycles. public class AppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram AppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.SyntaxOk StoredProgram.AddMethod(Method) StoredProgram.GetMethod(string) StoredProgram.AddVariable(Evaluation) StoredProgram.GetVariable(string) StoredProgram.GetVariable(int) StoredProgram.FindVariable(Evaluation) StoredProgram.FindVariable(string) StoredProgram.VariableExists(string) StoredProgram.GetVarValue(string) StoredProgram.UpdateVariable(string, int) StoredProgram.UpdateVariable(string, double) StoredProgram.UpdateVariable(string, bool) StoredProgram.DeleteVariable(string) StoredProgram.IsExpression(string) StoredProgram.EvaluateExpressionWithString(string) StoredProgram.EvaluateExpression(string) StoredProgram.Push(ConditionalCommand) StoredProgram.Pop() StoredProgram.Add(Command) StoredProgram.NextCommand() StoredProgram.ResetProgram() StoredProgram.Commandsleft() StoredProgram.PC ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppStoredProgram(ICanvas) Initializes a new instance of the AppStoredProgram class. Calls the base class constructor with the provided canvas parameter. public AppStoredProgram(ICanvas canvas) Parameters canvas ICanvas The canvas used for drawing or executing the stored program. Methods Run() Executes the stored program by running the commands until they are finished or a restriction is met. It handles execution cycle limits and exception handling for commands. public override void Run()"
  },
  "api/ASE_Shreeja_Neupane.AppTriangle.html": {
    "href": "api/ASE_Shreeja_Neupane.AppTriangle.html",
    "title": "Class AppTriangle | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppTriangle Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll Represents a custom BOOSE.CommandTwoParameters class for drawing a triangle on the canvas. public class AppTriangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppTriangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandTwoParameters.CheckParameters(string[]) CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppTriangle(AppCanvas) Initializes a new instance of the AppTriangle class with a canvas. public AppTriangle(AppCanvas canvas) Parameters canvas AppCanvas The canvas on which the triangle will be drawn. AppTriangle(Canvas, int, int) Initializes a new instance of the AppTriangle class with a canvas and dimensions. public AppTriangle(Canvas c, int width, int height) Parameters c Canvas The canvas on which the triangle will be drawn. width int The width of the triangle. height int The height of the triangle. Methods Execute() Executes the command to draw a triangle on the canvas using the specified width and height. public override void Execute()"
  },
  "api/ASE_Shreeja_Neupane.AppWhile.html": {
    "href": "api/ASE_Shreeja_Neupane.AppWhile.html",
    "title": "Class AppWhile | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppWhile Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll Represents a custom BOOSE.While class that inherits from the BOOSE.While class. Reduces restrictions during initialization. public class AppWhile : While, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand While AppWhile Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Initializes a new instance of the AppWhile class. Calls the ReduceRestrictions method during initialization. public AppWhile() Methods Restrictions() public override void Restrictions()"
  },
  "api/ASE_Shreeja_Neupane.AppWrite.html": {
    "href": "api/ASE_Shreeja_Neupane.AppWrite.html",
    "title": "Class AppWrite | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class AppWrite Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll The AppWrite class represents a command for writing text to a canvas. public class AppWrite : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppWrite Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWrite() Default constructor for the AppWrite class. public AppWrite() AppWrite(AppCanvas) Constructor that initializes AppWrite with a canvas object. public AppWrite(AppCanvas canvas) Parameters canvas AppCanvas The canvas on which the text will be written. Methods CheckParameters(string[]) Validates the parameters for the Write command. Ensures that there is exactly one parameter for the text to be written. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of parameters for the command. Exceptions ParserException Thrown if the number of parameters is incorrect. Execute() Executes the AppWrite command by writing the validated and processed text on the canvas. public override void Execute()"
  },
  "api/ASE_Shreeja_Neupane.FileManager.html": {
    "href": "api/ASE_Shreeja_Neupane.FileManager.html",
    "title": "Class FileManager | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class FileManager Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll Singleton class to manage file operations like loading and saving images. Ensures that only one instance of the FileManager is used throughout the application. public class FileManager Inheritance object FileManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance Gets the single instance of the FileManager class. Ensures thread-safety and lazy initialization. public static FileManager Instance { get; } Property Value FileManager Methods LoadImage(Bitmap, PictureBox) Loads an image from the user's file system and draws it onto the canvas. Updates the provided PictureBox with the loaded image. public void LoadImage(Bitmap canvasBitmap, PictureBox outputWindow) Parameters canvasBitmap Bitmap The current canvas bitmap to update with the loaded image. outputWindow PictureBox The PictureBox that will display the loaded image. SaveImage(Bitmap) Saves the current canvas bitmap to a file. Allows the user to choose the file format (PNG, JPEG, or BMP). public void SaveImage(Bitmap canvasBitmap) Parameters canvasBitmap Bitmap The bitmap representing the canvas to save."
  },
  "api/ASE_Shreeja_Neupane.Form1.html": {
    "href": "api/ASE_Shreeja_Neupane.Form1.html",
    "title": "Class Form1 | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class Form1 Namespace ASE_Shreeja_Neupane Assembly ASE_Shreeja_Neupane.dll Main Form for the application, handling user interactions and canvas rendering. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes the form and sets up required components, including the canvas, command factory, program, and parser. public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Shreeja_Neupane.html": {
    "href": "api/ASE_Shreeja_Neupane.html",
    "title": "Namespace ASE_Shreeja_Neupane | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Namespace ASE_Shreeja_Neupane Classes AppArray array class that inherits from the BOOSE.Array class. AppCall AppCall that inherits from the Call class. AppCanvas The AppCanvas class implements the ICanvas interface AppCircle The AppCircle class represents a command for drawing a circle with an optional filled state. AppClear The AppClear class is responsible for clearing the canvas. It inherits from CanvasCommand. AppCommandFactory AppCommandFactory inherits the CommandFactory class and overrides the MakeCommand method to handle custom commands. AppElse Else block that inherits from the Else class. AppEnd end block that inherits from the End class. AppFor BOOSE.For class that inherits from the BOOSE.For class. AppIf BOOSE.If class that inherits from the BOOSE.If class. AppInt class that inherits from the BOOSE.Int class. Adds custom restrictions for variable count and overrides key methods. AppMethod method that inherits from the Method class. AppParser program that inherits from the BOOSE.Parser class. AppReal class that inherits from the BOOSE.Real class. Adds custom restrictions for variable count and overrides key methods. AppRectangle The AppRectangle class represents a command for drawing a rectangle with optional filling on a canvas. AppReset command to reset the canvas in the application. Inherits from BOOSE.CanvasCommand and overrides the Execute method to reset the canvas. AppStoredProgram Represents a custom BOOSE.StoredProgram class that inherits from the BOOSE.StoredProgram class. Provides custom execution logic with limits on execution cycles. AppTriangle Represents a custom BOOSE.CommandTwoParameters class for drawing a triangle on the canvas. AppWhile Represents a custom BOOSE.While class that inherits from the BOOSE.While class. Reduces restrictions during initialization. AppWrite The AppWrite class represents a command for writing text to a canvas. FileManager Singleton class to manage file operations like loading and saving images. Ensures that only one instance of the FileManager is used throughout the application. Form1 Main Form for the application, handling user interactions and canvas rendering."
  },
  "api/ASE_Shreeja_Test.Component2TestCases.html": {
    "href": "api/ASE_Shreeja_Test.Component2TestCases.html",
    "title": "Class Component2TestCases | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class Component2TestCases Namespace ASE_Shreeja_Test Assembly ASE Shreeja Test.dll Test class for Component 2 functionalities, covering various operations such as integer, real, and array manipulations, along with flow control operations like 'if', 'while', 'for', method calls, and exception handling. [TestClass] public class Component2TestCases Inheritance object Component2TestCases Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods InvalidDatatype_Throws_StoredProgramException() Tests an invalid array operation where an incorrect data type is used. Expects a BOOSE.StoredProgramException to be thrown. [TestMethod] [ExpectedException(typeof(StoredProgramException), \"StoredProgram Exception occurred.\")] public void InvalidDatatype_Throws_StoredProgramException() Invalid_If() Tests an invalid 'if' operation where the condition is not met. Verifies that the correct block is executed when the condition is false. [TestMethod] public void Invalid_If() Invalid_Method() Tests an invalid method operation where the method call has insufficient parameters. Expects a BOOSE.StoredProgramException due to incorrect method call. [ExpectedException(typeof(StoredProgramException), \"\")] [TestMethod] public void Invalid_Method() MissingArraySize_Throws_ParserException() Tests the missing array size declaration, expecting a BOOSE.ParserException to be thrown. [TestMethod] [ExpectedException(typeof(ParserException), \"Expected Parser Exception occurred.\")] public void MissingArraySize_Throws_ParserException() SetAndGetVal() Tests setting and getting the value of an integer variable. Verifies that the value is properly stored and retrieved. [TestMethod] public void SetAndGetVal() SetAndGetVal_Real() Tests setting and getting the value of a real (floating-point) variable. Verifies that the value is properly stored and retrieved. [TestMethod] public void SetAndGetVal_Real() SetAndGetVarName() Tests setting and getting the variable name of an integer variable. Ensures the variable name is correctly set and retrieved. [TestMethod] public void SetAndGetVarName() SetAndGetVariName_Real() Tests setting and getting the variable name of a real (floating-point) variable. Ensures the variable name is correctly set and retrieved. [TestMethod] public void SetAndGetVariName_Real() Setup() Initializes the required objects for testing the functionalities. [TestInitialize] public void Setup() Test_For_Loop_No_Execution_With_Invalid_Start_End() Tests an invalid 'for' loop operation where the start and end conditions lead to no loop execution. Expects a BOOSE.StoredProgramException for an infinite loop. [ExpectedException(typeof(StoredProgramException), \"Infinite loop.\")] [TestMethod] public void Test_For_Loop_No_Execution_With_Invalid_Start_End() ValidArray_VariableUpdate() Tests a valid array operation by updating a specific index in the array and retrieving its value. Ensures correct functionality for array indexing and value assignment. [TestMethod] public void ValidArray_VariableUpdate() Valid_For() Tests a valid 'for' loop operation where the loop executes correctly based on given conditions. [TestMethod] public void Valid_For() Valid_If() Tests a valid 'if' operation where the condition is met. Verifies that the correct block is executed when the condition is true. [TestMethod] public void Valid_If() Valid_Method() Tests a valid method operation where the method performs a simple calculation. Verifies correct method execution and result. [TestMethod] public void Valid_Method() Valid_While() Tests a valid 'while' operation where the condition is met. Verifies that the loop executes correctly while the condition holds. [TestMethod] public void Valid_While() While_Condition_Error() Tests a 'while' operation where the condition is not met initially. Ensures that the loop does not execute when the condition is false. [TestMethod] public void While_Condition_Error()"
  },
  "api/ASE_Shreeja_Test.UnitTest1.html": {
    "href": "api/ASE_Shreeja_Test.UnitTest1.html",
    "title": "Class UnitTest1 | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class UnitTest1 Namespace ASE_Shreeja_Test Assembly ASE Shreeja Test.dll [TestClass] public class UnitTest1 Inheritance object UnitTest1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Circle_negative_radius() Verifies that Circle throws an exception when given a negative radius. [TestMethod] [ExpectedException(typeof(CanvasException), \"negative radius\")] public void Circle_negative_radius() Circle_outofbound_radius() Verifies that Circle throws an exception when given an out-of-bound radius. [TestMethod] [ExpectedException(typeof(CanvasException), \"out of bound\")] public void Circle_outofbound_radius() Circle_valid_radius() Validates that the Circle method works correctly for valid radius values. [TestMethod] public void Circle_valid_radius() Drawto_OutOfBound() Verifies that DrawTo throws an exception when given out-of-bound coordinates. [TestMethod] [ExpectedException(typeof(CanvasException), \"outofbound\")] public void Drawto_OutOfBound() Drawto_negative_position() Verifies that DrawTo throws an exception when given negative coordinates. [TestMethod] [ExpectedException(typeof(CanvasException), \"negative position\")] public void Drawto_negative_position() Drawto_valid_position() Validates that the DrawTo method updates canvas position correctly when given valid coordinates. [TestMethod] public void Drawto_valid_position() Moveto_OutOfBound() Verifies that MoveTo throws an exception when given out-of-bound coordinates. [TestMethod] [ExpectedException(typeof(CanvasException), \"outofbound\")] public void Moveto_OutOfBound() Moveto_negative_position() Verifies that MoveTo throws an exception when given negative coordinates. [TestMethod] [ExpectedException(typeof(CanvasException), \"Screen position (MoveTo) invalid\")] public void Moveto_negative_position() Moveto_valid_position() Validates that the MoveTo method updates canvas position correctly when given valid coordinates. [TestMethod] public void Moveto_valid_position() Multi_line_method() Tests multiple canvas operations sequentially for integration testing. [TestMethod] public void Multi_line_method() Rect_negative_parameter() Verifies that Rect throws an exception when given negative dimensions. [TestMethod] [ExpectedException(typeof(CanvasException), \"negative parameter\")] public void Rect_negative_parameter() Rect_outofbound_parameter() Verifies that Rect throws an exception when given out-of-bound dimensions. [TestMethod] [ExpectedException(typeof(CanvasException), \"out of bound\")] public void Rect_outofbound_parameter() Rect_valid_parameters() Validates that the Rect method works correctly for valid dimensions. [TestMethod] public void Rect_valid_parameters() Write_null_parameter() Verifies that WriteText throws an exception when given null input. [TestMethod] [ExpectedException(typeof(CanvasException), \"null parameter\")] public void Write_null_parameter() Write_test() Validates the WriteText method for valid string input. [TestMethod] public void Write_test() setup() [TestInitialize] public void setup()"
  },
  "api/ASE_Shreeja_Test.UnitTest2.html": {
    "href": "api/ASE_Shreeja_Test.UnitTest2.html",
    "title": "Class UnitTest2 | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Class UnitTest2 Namespace ASE_Shreeja_Test Assembly ASE Shreeja Test.dll Test class for Component 2 functionalities, covering various operations such as integer, real, and array manipulations, along with flow control operations like 'if', 'while', 'for', method calls, and exception handling. [TestClass] public class UnitTest2 Inheritance object UnitTest2 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods InvalidDatatype_Throws_StoredProgramException() Tests an invalid array operation where an incorrect data type is used. Expects a BOOSE.StoredProgramException to be thrown. [TestMethod] [ExpectedException(typeof(StoredProgramException), \"StoredProgram Exception occurred.\")] public void InvalidDatatype_Throws_StoredProgramException() Invalid_If() Tests an invalid 'if' operation where the condition is not met. Verifies that the correct block is executed when the condition is false. [TestMethod] public void Invalid_If() Invalid_Method() Tests an invalid method operation where the method call has insufficient parameters. Expects a BOOSE.StoredProgramException due to incorrect method call. [ExpectedException(typeof(StoredProgramException), \"\")] [TestMethod] public void Invalid_Method() MissingArraySize_Throws_ParserException() Tests the missing array size declaration, expecting a BOOSE.ParserException to be thrown. [TestMethod] [ExpectedException(typeof(ParserException), \"Expected Parser Exception occurred.\")] public void MissingArraySize_Throws_ParserException() SetAndGetVal() Tests setting and getting the value of an integer variable. Verifies that the value is properly stored and retrieved. [TestMethod] public void SetAndGetVal() SetAndGetVal_Real() Tests setting and getting the value of a real (floating-point) variable. Verifies that the value is properly stored and retrieved. [TestMethod] public void SetAndGetVal_Real() SetAndGetVarName() Tests setting and getting the variable name of an integer variable. Ensures the variable name is correctly set and retrieved. [TestMethod] public void SetAndGetVarName() SetAndGetVariName_Real() Tests setting and getting the variable name of a real (floating-point) variable. Ensures the variable name is correctly set and retrieved. [TestMethod] public void SetAndGetVariName_Real() Setup() Initializes the required objects for testing the functionalities. [TestInitialize] public void Setup() Test_For_Loop_No_Execution_With_Invalid_Start_End() Tests an invalid 'for' loop operation where the start and end conditions lead to no loop execution. Expects a BOOSE.StoredProgramException for an infinite loop. [ExpectedException(typeof(StoredProgramException), \"Infinite loop.\")] [TestMethod] public void Test_For_Loop_No_Execution_With_Invalid_Start_End() ValidArray_VariableUpdate() Tests a valid array operation by updating a specific index in the array and retrieving its value. Ensures correct functionality for array indexing and value assignment. [TestMethod] public void ValidArray_VariableUpdate() Valid_For() Tests a valid 'for' loop operation where the loop executes correctly based on given conditions. [TestMethod] public void Valid_For() Valid_If() Tests a valid 'if' operation where the condition is met. Verifies that the correct block is executed when the condition is true. [TestMethod] public void Valid_If() Valid_Method() Tests a valid method operation where the method performs a simple calculation. Verifies correct method execution and result. [TestMethod] public void Valid_Method() Valid_While() Tests a valid 'while' operation where the condition is met. Verifies that the loop executes correctly while the condition holds. [TestMethod] public void Valid_While() While_Condition_Error() Tests a 'while' operation where the condition is not met initially. Ensures that the loop does not execute when the condition is false. [TestMethod] public void While_Condition_Error()"
  },
  "api/ASE_Shreeja_Test.html": {
    "href": "api/ASE_Shreeja_Test.html",
    "title": "Namespace ASE_Shreeja_Test | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Namespace ASE_Shreeja_Test Classes UnitTest1 UnitTest2 Test class for Component 2 functionalities, covering various operations such as integer, real, and array manipulations, along with flow control operations like 'if', 'while', 'for', method calls, and exception handling."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Shreeja Neupane Comp-1 Documentation",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}